generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [citext]
}

// NEXT AUTH START

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  ProductReview ProductReview[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// NEXT AUTH START

// PRODUCTS START
model Product {
  id                   String              @id @default(cuid())
  slug                 String              @unique
  name                 String
  description          String
  image                String
  isPublished          Boolean             @default(false)
  videoURL             String?
  brand                String?
  shippingMethod       String?
  publishedAt          DateTime
  createdBy            String
  refoundPolicy        String?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  ProductReview        ProductReview[]
  ProductDetail        ProductDetail[]
  ProductSubCategory   ProductSubCategory? @relation(fields: [productSubCategoryId], references: [id])
  productSubCategoryId String?
}

model ProductDetail {
  id           String         @id @default(cuid())
  product_id   String
  price        Float
  color        String
  size         String?
  sku          String?
  brand        String?
  quantity     Int            @default(0)
  unitSold     Int            @default(0)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  product      Product        @relation(fields: [product_id], references: [id])
  ProductImage ProductImage[]
}

model ProductReview {
  id         String   @id @default(cuid())
  product_id String
  user_id    String
  rating     Int      @default(0)
  comment    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [product_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id])
}

model ProductImage {
  id              String         @id @default(cuid())
  productDetailId String?
  image           String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  ProductDetail   ProductDetail? @relation(fields: [productDetailId], references: [id])
}

model ProductCategory {
  id                 String               @id @default(cuid())
  name               String
  slug               String               @unique
  description        String
  image              String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  ProductSubCategory ProductSubCategory[]
}

model ProductSubCategory {
  id              String          @id @default(cuid())
  name            String
  slug            String          @unique
  description     String
  image           String?
  category_id     String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  productCategory ProductCategory @relation(fields: [category_id], references: [id])
  Product         Product[]
}

// PRODUCTS END
